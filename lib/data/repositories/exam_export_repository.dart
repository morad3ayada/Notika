import 'dart:io';
import 'dart:convert';
import 'package:path_provider/path_provider.dart';
import '../models/exam_export_model.dart';

/// Repository ูุณุคูู ุนู ุชุตุฏูุฑ ุงูุฃุณุฆูุฉ ุฅูู ููู ูุตู ููุณู
/// ููุดุฆ ููู ูุตู ููุณู ูุญุชูู ุนูู ุฌููุน ุงูุฃุณุฆูุฉ ูุงูุฅุฌุงุจุงุช
class ExamExportRepository {
  
  /// ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูุชุตุฏูุฑ ุงูุฃุณุฆูุฉ ุฅูู ููู ูุตู
  /// ุชุฃุฎุฐ ExamExportModel ูุชูุดุฆ ููู ูุตู ููุณู
  Future<ExamExportResponse> exportToWord(ExamExportModel examData) async {
    try {
      print('๐ ุจุฏุก ุชุตุฏูุฑ ุงูุฃุณุฆูุฉ ุฅูู ููู ูุตู...');
      
      // ุฅูุดุงุก ูุญุชูู ุงููุซููุฉ
      final docContent = await _createDocumentContent(examData);
      
      // ุญูุธ ุงูููู
      final filePath = await _saveFile(docContent, examData);
      
      print('โ ุชู ุชุตุฏูุฑ ุงูุฃุณุฆูุฉ ุจูุฌุงุญ ุฅูู: $filePath');
      
      return ExamExportResponse(
        success: true,
        message: 'ุชู ุฅูุดุงุก ุงูููู ุจูุฌุงุญ',
        filePath: filePath,
        fileName: filePath.split(Platform.pathSeparator).last,
      );
      
    } catch (e) {
      print('โ ุฎุทุฃ ุฃุซูุงุก ุชุตุฏูุฑ ุงูุฃุณุฆูุฉ: $e');
      return ExamExportResponse(
        success: false,
        message: 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ุงูููู: ${e.toString()}',
      );
    }
  }

  /// ุฅูุดุงุก ูุญุชูู ุงููุซููุฉ ูู ุงูุฃุณุฆูุฉ
  Future<String> _createDocumentContent(ExamExportModel examData) async {
    final buffer = StringBuffer();
    
    // ุฅุถุงูุฉ ูุนูููุงุช ุงูุงูุชุญุงู
    buffer.writeln('ุงูุชุญุงู ${examData.subjectName ?? ""}');
    buffer.writeln('ุงููุฏุฑุณุฉ: ${examData.schoolName ?? "ุบูุฑ ูุญุฏุฏ"}');
    buffer.writeln('ุงููุฑุญูุฉ: ${examData.stageName ?? "ุบูุฑ ูุญุฏุฏ"}');
    buffer.writeln('ุงูุดุนุจุฉ: ${examData.sectionName ?? "ุบูุฑ ูุญุฏุฏ"}');
    buffer.writeln('ุงูุชุงุฑูุฎ: ${_formatDate(examData.createdAt)}');
    buffer.writeln('ุนุฏุฏ ุงูุฃุณุฆูุฉ: ${examData.totalQuestions}');
    buffer.writeln('');
    buffer.writeln('=' * 50);
    buffer.writeln('');

    // ุชุฌููุน ุงูุฃุณุฆูุฉ ุญุณุจ ุงูููุน
    final questionsByType = <String, List<ExamQuestion>>{};
    for (final question in examData.questions) {
      questionsByType.putIfAbsent(question.type, () => []).add(question);
    }

    int questionCounter = 1;

    // ุฅุถุงูุฉ ุงูุฃุณุฆูุฉ ุงูุงุฎุชูุงุฑูุฉ
    if (questionsByType.containsKey('choice')) {
      buffer.writeln('ุงูุฃุณุฆูุฉ ุงูุงุฎุชูุงุฑูุฉ:');
      buffer.writeln('-' * 30);
      for (final question in questionsByType['choice']!) {
        buffer.writeln('ุงูุณุคุงู $questionCounter: ${question.questionText}');
        
        for (int i = 0; i < question.options.length; i++) {
          final letter = String.fromCharCode(65 + i); // A, B, C, D
          buffer.writeln('   $letter) ${question.options[i]}');
        }
        
        buffer.writeln('ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ: ${question.formattedCorrectAnswer}');
        buffer.writeln('');
        questionCounter++;
      }
      buffer.writeln('');
    }

    // ุฅุถุงูุฉ ุฃุณุฆูุฉ ุตุญ ุฃู ุฎุทุฃ
    if (questionsByType.containsKey('truefalse')) {
      buffer.writeln('ุฃุณุฆูุฉ ุตุญ ุฃู ุฎุทุฃ:');
      buffer.writeln('-' * 30);
      for (final question in questionsByType['truefalse']!) {
        buffer.writeln('ุงูุณุคุงู $questionCounter: ${question.questionText}');
        buffer.writeln('ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ: ${question.formattedCorrectAnswer}');
        buffer.writeln('');
        questionCounter++;
      }
      buffer.writeln('');
    }

    // ุฅุถุงูุฉ ุฃุณุฆูุฉ ุฃููู ุงููุฑุงุบ
    if (questionsByType.containsKey('complete')) {
      buffer.writeln('ุฃุณุฆูุฉ ุฃููู ุงููุฑุงุบ:');
      buffer.writeln('-' * 30);
      for (final question in questionsByType['complete']!) {
        buffer.writeln('ุงูุณุคุงู $questionCounter: ${question.questionText}');
        buffer.writeln('ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ: ${question.formattedCorrectAnswer}');
        buffer.writeln('');
        questionCounter++;
      }
      buffer.writeln('');
    }

    // ุฅุถุงูุฉ ุงูุฃุณุฆูุฉ ุงูููุงููุฉ
    if (questionsByType.containsKey('essay')) {
      buffer.writeln('ุงูุฃุณุฆูุฉ ุงูููุงููุฉ:');
      buffer.writeln('-' * 30);
      for (final question in questionsByType['essay']!) {
        buffer.writeln('ุงูุณุคุงู $questionCounter: ${question.questionText}');
        if (question.correctAnswer != null && question.correctAnswer!.isNotEmpty) {
          buffer.writeln('ุงูุฅุฌุงุจุฉ ุงููููุฐุฌูุฉ: ${question.correctAnswer}');
        }
        buffer.writeln('');
        questionCounter++;
      }
    }

    return buffer.toString();
  }

  /// ุญูุธ ุงูููู ูู ูุฌูุฏ ุงูุชุญูููุงุช
  Future<String> _saveFile(String content, ExamExportModel examData) async {
    try {
      // ุงูุญุตูู ุนูู ูุฌูุฏ ุงูุชุญูููุงุช
      Directory? directory;
      
      if (Platform.isAndroid) {
        directory = await getExternalStorageDirectory();
        // ูุญุงููุฉ ุงููุตูู ููุฌูุฏ ุงูุชุญูููุงุช
        final downloadDir = Directory('/storage/emulated/0/Download');
        if (await downloadDir.exists()) {
          directory = downloadDir;
        }
      } else if (Platform.isIOS) {
        directory = await getApplicationDocumentsDirectory();
      } else {
        directory = await getDownloadsDirectory();
      }
      
      if (directory == null) {
        directory = await getApplicationDocumentsDirectory();
      }

      // ุฅูุดุงุก ุงุณู ุงูููู
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final subjectName = examData.subjectName?.replaceAll(' ', '_') ?? 'ุงูุชุญุงู';
      final fileName = 'ุงุณุฆูุฉ_${subjectName}_$timestamp.txt';
      
      // ุฅูุดุงุก ูุณุงุฑ ุงูููู
      final filePath = '${directory.path}${Platform.pathSeparator}$fileName';
      
      // ูุชุงุจุฉ ุงููุญุชูู ูููู ูุตู
      final file = File(filePath);
      await file.writeAsString(content, encoding: utf8);
      
      print('๐พ ุชู ุญูุธ ุงูููู ูู: $filePath');
      
      return filePath;
      
    } catch (e) {
      print('โ ุฎุทุฃ ูู ุญูุธ ุงูููู: $e');
      rethrow;
    }
  }

  /// ุชูุณูู ุงูุชุงุฑูุฎ
  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }
}
